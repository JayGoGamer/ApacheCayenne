package example.cayenne.auto;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import example.cayenne.Reiziger;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

/**
 * Class _Adres was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Adres extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ADRES_ID_PK_COLUMN = "adres_id";

    public static final NumericProperty<Integer> ADRES_ID = PropertyFactory.createNumeric("adresId", Integer.class);
    public static final StringProperty<String> HUISNUMMER = PropertyFactory.createString("huisnummer", String.class);
    public static final StringProperty<String> POSTCODE = PropertyFactory.createString("postcode", String.class);
    public static final StringProperty<String> STRAAT = PropertyFactory.createString("straat", String.class);
    public static final StringProperty<String> WOONPLAATS = PropertyFactory.createString("woonplaats", String.class);
    public static final EntityProperty<Reiziger> REIZIGER = PropertyFactory.createEntity("reiziger", Reiziger.class);

    protected int adresId;
    protected String huisnummer;
    protected String postcode;
    protected String straat;
    protected String woonplaats;

    protected Object reiziger;

    public void setAdresId(int adresId) {
        beforePropertyWrite("adresId", this.adresId, adresId);
        this.adresId = adresId;
    }

    public int getAdresId() {
        beforePropertyRead("adresId");
        return this.adresId;
    }

    public void setHuisnummer(String huisnummer) {
        beforePropertyWrite("huisnummer", this.huisnummer, huisnummer);
        this.huisnummer = huisnummer;
    }

    public String getHuisnummer() {
        beforePropertyRead("huisnummer");
        return this.huisnummer;
    }

    public void setPostcode(String postcode) {
        beforePropertyWrite("postcode", this.postcode, postcode);
        this.postcode = postcode;
    }

    public String getPostcode() {
        beforePropertyRead("postcode");
        return this.postcode;
    }

    public void setStraat(String straat) {
        beforePropertyWrite("straat", this.straat, straat);
        this.straat = straat;
    }

    public String getStraat() {
        beforePropertyRead("straat");
        return this.straat;
    }

    public void setWoonplaats(String woonplaats) {
        beforePropertyWrite("woonplaats", this.woonplaats, woonplaats);
        this.woonplaats = woonplaats;
    }

    public String getWoonplaats() {
        beforePropertyRead("woonplaats");
        return this.woonplaats;
    }

    public void setReiziger(Reiziger reiziger) {
        setToOneTarget("reiziger", reiziger, true);
    }

    public Reiziger getReiziger() {
        return (Reiziger)readProperty("reiziger");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "adresId":
                return this.adresId;
            case "huisnummer":
                return this.huisnummer;
            case "postcode":
                return this.postcode;
            case "straat":
                return this.straat;
            case "woonplaats":
                return this.woonplaats;
            case "reiziger":
                return this.reiziger;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "adresId":
                this.adresId = val == null ? 0 : (int)val;
                break;
            case "huisnummer":
                this.huisnummer = (String)val;
                break;
            case "postcode":
                this.postcode = (String)val;
                break;
            case "straat":
                this.straat = (String)val;
                break;
            case "woonplaats":
                this.woonplaats = (String)val;
                break;
            case "reiziger":
                this.reiziger = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeInt(this.adresId);
        out.writeObject(this.huisnummer);
        out.writeObject(this.postcode);
        out.writeObject(this.straat);
        out.writeObject(this.woonplaats);
        out.writeObject(this.reiziger);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.adresId = in.readInt();
        this.huisnummer = (String)in.readObject();
        this.postcode = (String)in.readObject();
        this.straat = (String)in.readObject();
        this.woonplaats = (String)in.readObject();
        this.reiziger = in.readObject();
    }

}
