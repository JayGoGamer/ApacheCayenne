package example.cayenne.auto;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import example.cayenne.OvChipkaart;
import example.cayenne.Product;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDate;

/**
 * Class _OvChipkaartProduct was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _OvChipkaartProduct extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String KAART_NUMMER_PK_COLUMN = "kaart_nummer";
    public static final String PRODUCT_NUMMER_PK_COLUMN = "product_nummer";

    public static final DateProperty<LocalDate> LAST_UPDATE = PropertyFactory.createDate("lastUpdate", LocalDate.class);
    public static final StringProperty<String> STATUS = PropertyFactory.createString("status", String.class);
    public static final EntityProperty<OvChipkaart> OV_CHIPKAART = PropertyFactory.createEntity("ovChipkaart", OvChipkaart.class);
    public static final EntityProperty<Product> PRODUCT = PropertyFactory.createEntity("product", Product.class);

    protected LocalDate lastUpdate;
    protected String status;

    protected Object ovChipkaart;
    protected Object product;

    public void setLastUpdate(LocalDate lastUpdate) {
        beforePropertyWrite("lastUpdate", this.lastUpdate, lastUpdate);
        this.lastUpdate = lastUpdate;
    }

    public LocalDate getLastUpdate() {
        beforePropertyRead("lastUpdate");
        return this.lastUpdate;
    }

    public void setStatus(String status) {
        beforePropertyWrite("status", this.status, status);
        this.status = status;
    }

    public String getStatus() {
        beforePropertyRead("status");
        return this.status;
    }

    public void setOvChipkaart(OvChipkaart ovChipkaart) {
        setToOneTarget("ovChipkaart", ovChipkaart, true);
    }

    public OvChipkaart getOvChipkaart() {
        return (OvChipkaart)readProperty("ovChipkaart");
    }

    public void setProduct(Product product) {
        setToOneTarget("product", product, true);
    }

    public Product getProduct() {
        return (Product)readProperty("product");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "lastUpdate":
                return this.lastUpdate;
            case "status":
                return this.status;
            case "ovChipkaart":
                return this.ovChipkaart;
            case "product":
                return this.product;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "lastUpdate":
                this.lastUpdate = (LocalDate)val;
                break;
            case "status":
                this.status = (String)val;
                break;
            case "ovChipkaart":
                this.ovChipkaart = val;
                break;
            case "product":
                this.product = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.lastUpdate);
        out.writeObject(this.status);
        out.writeObject(this.ovChipkaart);
        out.writeObject(this.product);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.lastUpdate = (LocalDate)in.readObject();
        this.status = (String)in.readObject();
        this.ovChipkaart = in.readObject();
        this.product = in.readObject();
    }

}
