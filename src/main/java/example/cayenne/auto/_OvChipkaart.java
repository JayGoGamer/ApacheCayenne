package example.cayenne.auto;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.*;
import example.cayenne.OvChipkaartProduct;
import example.cayenne.Reiziger;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.List;

/**
 * Class _OvChipkaart was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _OvChipkaart extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String KAART_NUMMER_PK_COLUMN = "kaart_nummer";

    public static final DateProperty<LocalDate> GELDIG_TOT = PropertyFactory.createDate("geldigTot", LocalDate.class);
    public static final NumericProperty<Integer> KAART_NUMMER = PropertyFactory.createNumeric("kaartNummer", Integer.class);
    public static final NumericProperty<BigDecimal> KLASSE = PropertyFactory.createNumeric("klasse", BigDecimal.class);
    public static final NumericProperty<BigDecimal> SALDO = PropertyFactory.createNumeric("saldo", BigDecimal.class);
    public static final ListProperty<OvChipkaartProduct> OV_CHIPKAART_PRODUCTS = PropertyFactory.createList("ovChipkaartProducts", OvChipkaartProduct.class);
    public static final EntityProperty<Reiziger> REIZIGER = PropertyFactory.createEntity("reiziger", Reiziger.class);

    protected LocalDate geldigTot;
    protected int kaartNummer;
    protected BigDecimal klasse;
    protected BigDecimal saldo;

    protected Object ovChipkaartProducts;
    protected Object reiziger;

    public void setGeldigTot(LocalDate geldigTot) {
        beforePropertyWrite("geldigTot", this.geldigTot, geldigTot);
        this.geldigTot = geldigTot;
    }

    public LocalDate getGeldigTot() {
        beforePropertyRead("geldigTot");
        return this.geldigTot;
    }

    public void setKaartNummer(int kaartNummer) {
        beforePropertyWrite("kaartNummer", this.kaartNummer, kaartNummer);
        this.kaartNummer = kaartNummer;
    }

    public int getKaartNummer() {
        beforePropertyRead("kaartNummer");
        return this.kaartNummer;
    }

    public void setKlasse(BigDecimal klasse) {
        beforePropertyWrite("klasse", this.klasse, klasse);
        this.klasse = klasse;
    }

    public BigDecimal getKlasse() {
        beforePropertyRead("klasse");
        return this.klasse;
    }

    public void setSaldo(BigDecimal saldo) {
        beforePropertyWrite("saldo", this.saldo, saldo);
        this.saldo = saldo;
    }

    public BigDecimal getSaldo() {
        beforePropertyRead("saldo");
        return this.saldo;
    }

    public void addToOvChipkaartProducts(OvChipkaartProduct obj) {
        addToManyTarget("ovChipkaartProducts", obj, true);
    }

    public void removeFromOvChipkaartProducts(OvChipkaartProduct obj) {
        removeToManyTarget("ovChipkaartProducts", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<OvChipkaartProduct> getOvChipkaartProducts() {
        return (List<OvChipkaartProduct>)readProperty("ovChipkaartProducts");
    }

    public void setReiziger(Reiziger reiziger) {
        setToOneTarget("reiziger", reiziger, true);
    }

    public Reiziger getReiziger() {
        return (Reiziger)readProperty("reiziger");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "geldigTot":
                return this.geldigTot;
            case "kaartNummer":
                return this.kaartNummer;
            case "klasse":
                return this.klasse;
            case "saldo":
                return this.saldo;
            case "ovChipkaartProducts":
                return this.ovChipkaartProducts;
            case "reiziger":
                return this.reiziger;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "geldigTot":
                this.geldigTot = (LocalDate)val;
                break;
            case "kaartNummer":
                this.kaartNummer = val == null ? 0 : (int)val;
                break;
            case "klasse":
                this.klasse = (BigDecimal)val;
                break;
            case "saldo":
                this.saldo = (BigDecimal)val;
                break;
            case "ovChipkaartProducts":
                this.ovChipkaartProducts = val;
                break;
            case "reiziger":
                this.reiziger = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.geldigTot);
        out.writeInt(this.kaartNummer);
        out.writeObject(this.klasse);
        out.writeObject(this.saldo);
        out.writeObject(this.ovChipkaartProducts);
        out.writeObject(this.reiziger);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.geldigTot = (LocalDate)in.readObject();
        this.kaartNummer = in.readInt();
        this.klasse = (BigDecimal)in.readObject();
        this.saldo = (BigDecimal)in.readObject();
        this.ovChipkaartProducts = in.readObject();
        this.reiziger = in.readObject();
    }

}
