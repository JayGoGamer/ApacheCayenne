package example.cayenne.auto;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.*;
import example.cayenne.Adres;
import example.cayenne.OvChipkaart;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDate;
import java.util.List;

/**
 * Class _Reiziger was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Reiziger extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String REIZIGER_ID_PK_COLUMN = "reiziger_id";

    public static final StringProperty<String> ACHTERNAAM = PropertyFactory.createString("achternaam", String.class);
    public static final DateProperty<LocalDate> GEBOORTEDATUM = PropertyFactory.createDate("geboortedatum", LocalDate.class);
    public static final NumericProperty<Integer> REIZIGER_ID = PropertyFactory.createNumeric("reizigerId", Integer.class);
    public static final StringProperty<String> TUSSENVOEGSEL = PropertyFactory.createString("tussenvoegsel", String.class);
    public static final StringProperty<String> VOORLETTERS = PropertyFactory.createString("voorletters", String.class);
    public static final ListProperty<Adres> ADRESES = PropertyFactory.createList("adreses", Adres.class);
    public static final ListProperty<OvChipkaart> OV_CHIPKAARTS = PropertyFactory.createList("ovChipkaarts", OvChipkaart.class);

    protected String achternaam;
    protected LocalDate geboortedatum;
    protected int reizigerId;
    protected String tussenvoegsel;
    protected String voorletters;

    protected Object adreses;
    protected Object ovChipkaarts;

    public void setAchternaam(String achternaam) {
        beforePropertyWrite("achternaam", this.achternaam, achternaam);
        this.achternaam = achternaam;
    }

    public String getAchternaam() {
        beforePropertyRead("achternaam");
        return this.achternaam;
    }

    public void setGeboortedatum(LocalDate geboortedatum) {
        beforePropertyWrite("geboortedatum", this.geboortedatum, geboortedatum);
        this.geboortedatum = geboortedatum;
    }

    public LocalDate getGeboortedatum() {
        beforePropertyRead("geboortedatum");
        return this.geboortedatum;
    }

    public void setReizigerId(int reizigerId) {
        beforePropertyWrite("reizigerId", this.reizigerId, reizigerId);
        this.reizigerId = reizigerId;
    }

    public int getReizigerId() {
        beforePropertyRead("reizigerId");
        return this.reizigerId;
    }

    public void setTussenvoegsel(String tussenvoegsel) {
        beforePropertyWrite("tussenvoegsel", this.tussenvoegsel, tussenvoegsel);
        this.tussenvoegsel = tussenvoegsel;
    }

    public String getTussenvoegsel() {
        beforePropertyRead("tussenvoegsel");
        return this.tussenvoegsel;
    }

    public void setVoorletters(String voorletters) {
        beforePropertyWrite("voorletters", this.voorletters, voorletters);
        this.voorletters = voorletters;
    }

    public String getVoorletters() {
        beforePropertyRead("voorletters");
        return this.voorletters;
    }

    public void addToAdreses(Adres obj) {
        addToManyTarget("adreses", obj, true);
    }

    public void removeFromAdreses(Adres obj) {
        removeToManyTarget("adreses", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Adres> getAdreses() {
        return (List<Adres>)readProperty("adreses");
    }

    public void addToOvChipkaarts(OvChipkaart obj) {
        addToManyTarget("ovChipkaarts", obj, true);
    }

    public void removeFromOvChipkaarts(OvChipkaart obj) {
        removeToManyTarget("ovChipkaarts", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<OvChipkaart> getOvChipkaarts() {
        return (List<OvChipkaart>)readProperty("ovChipkaarts");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "achternaam":
                return this.achternaam;
            case "geboortedatum":
                return this.geboortedatum;
            case "reizigerId":
                return this.reizigerId;
            case "tussenvoegsel":
                return this.tussenvoegsel;
            case "voorletters":
                return this.voorletters;
            case "adreses":
                return this.adreses;
            case "ovChipkaarts":
                return this.ovChipkaarts;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "achternaam":
                this.achternaam = (String)val;
                break;
            case "geboortedatum":
                this.geboortedatum = (LocalDate)val;
                break;
            case "reizigerId":
                this.reizigerId = val == null ? 0 : (int)val;
                break;
            case "tussenvoegsel":
                this.tussenvoegsel = (String)val;
                break;
            case "voorletters":
                this.voorletters = (String)val;
                break;
            case "adreses":
                this.adreses = val;
                break;
            case "ovChipkaarts":
                this.ovChipkaarts = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.achternaam);
        out.writeObject(this.geboortedatum);
        out.writeInt(this.reizigerId);
        out.writeObject(this.tussenvoegsel);
        out.writeObject(this.voorletters);
        out.writeObject(this.adreses);
        out.writeObject(this.ovChipkaarts);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.achternaam = (String)in.readObject();
        this.geboortedatum = (LocalDate)in.readObject();
        this.reizigerId = in.readInt();
        this.tussenvoegsel = (String)in.readObject();
        this.voorletters = (String)in.readObject();
        this.adreses = in.readObject();
        this.ovChipkaarts = in.readObject();
    }

}
